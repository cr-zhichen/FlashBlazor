@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject IJwtService JwtService
@inject IUserSessionService UserSessionService

@code {

    [Parameter]
    public UserRole? Role { get; set; }

    override protected async Task OnInitializedAsync()
    {
        string? token;

        if (String.IsNullOrEmpty(UserSessionService.Token))
        {
            token = await LocalStorage.GetItemAsync<string>("token");
        }
        else
        {
            token = UserSessionService.Token;
        }

        if (string.IsNullOrEmpty(token))
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        var isValid = await JwtService.ValidateTokenAsync(token, Role.ToString() ?? "");

        if (!isValid)
        {
            NavigationManager.NavigateTo("/login");
            UserSessionService.Token = null;
            await LocalStorage.RemoveItemAsync("token");
            return;
        }

        // await base.OnAfterRenderAsync(firstRender);
    }
}